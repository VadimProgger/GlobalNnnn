import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

API_TOKEN = '7789717080:AAFAfRt7TkiYPEPfkMqCqgeA9CFxRWWMgXU'  # Replace with your bot's API token
ADMIN_ID = 1078426356  # Admin ID
GROUP_CHAT_ID = -1002177632005  # Channel ID

bot = Bot(API_TOKEN)
dp = Dispatcher()

news_submissions = {}
user_last_submission_time = {}
user_selection_status = {}

def user_kb():
    kb_list = [
        [KeyboardButton(text="üòê–û–±—ã—á–Ω—ã–π")],
        [KeyboardButton(text="üï∂Ô∏è–ê–Ω–æ–Ω–∏–º–Ω—ã–π")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb_list, resize_keyboard=True, one_time_keyboard=True)

def admin_kb(user_id):
    kb_list = [
        [InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_{user_id}"),
         InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb_list)

async def notify_admin(user_id, text, media_type, media_id=None):
    message = f"–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{text}"
    if media_type == 'photo':
        await bot.send_photo(ADMIN_ID, photo=media_id, caption=message, reply_markup=admin_kb(user_id))
    elif media_type == 'video':
        await bot.send_video(ADMIN_ID, video=media_id, caption=message, reply_markup=admin_kb(user_id))
    else:
        await bot.send_message(ADMIN_ID, message, reply_markup=admin_kb(user_id))

@dp.message(CommandStart())
async def start_command(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text='**üë®üèª‚Äçüíª–ü—Ä–∏–≤–µ—Ç!**\n\n–°—é–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –ª—é–±—É—é –Ω–æ–≤–æ—Å—Ç—å: **—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ.**\n\nüíÅüèª‚Äç‚ôÇÔ∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å, –º–µ—Å—Ç–æ –∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ. –í–∞—à–∏ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –±—É–¥—É—Ç –≤ 10 —Ä–∞–∑ –Ω–∞–≥–ª—è–¥–Ω–µ–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç.\n\n–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ @GBNEWSo', parse_mode='Markdown')
    await message.answer("‚å®Ô∏è –í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:", reply_markup=user_kb())
    user_selection_status[message.from_user.id] = None  
    logger.info(f"User {message.from_user.id} started the bot.")

@dp.message()
async def handle_news(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.username

    if user_selection_status.get(user_id) is None:
        if message.text == "üòê–û–±—ã—á–Ω—ã–π":
            await message.answer("üíÅüèª‚Äç‚ôÇÔ∏è –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, —Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏—Ö –∫ —Å–æ–æ–±—â–µ–Ω–∏—é\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ - –∫–æ–º–∞–Ω–¥–∞ /start")
            user_selection_status[user_id] = "–û–±—ã—á–Ω—ã–π"  
            logger.info(f"User {user_id} selected '–û–±—ã—á–Ω—ã–π' mode.")
            return  
        elif message.text == "üï∂Ô∏è–ê–Ω–æ–Ω–∏–º–Ω—ã–π":
            await message.answer("üëì –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, —Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏—Ö –∫ —Å–æ–æ–±—â–µ–Ω–∏—é\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ - –∫–æ–º–∞–Ω–¥–∞ /start")
            user_selection_status[user_id] = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π"  
            logger.info(f"User {user_id} selected '–ê–Ω–æ–Ω–∏–º–Ω—ã–π' mode.")
            return  
        else:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ (üòê–û–±—ã—á–Ω—ã–π –∏–ª–∏ üï∂Ô∏è–ê–Ω–æ–Ω–∏–º–Ω—ã–π) –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å.")
            return

    current_time = datetime.now()
    last_submission_time = user_last_submission_time.get(user_id)
    if last_submission_time and current_time - last_submission_time < timedelta(seconds=30):
        await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π.")
        return

    user_last_submission_time[user_id] = current_time
    await message.answer("‚úÖ –í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")

    if message.photo:
        caption = message.caption if message.caption else ""
        news_submissions[user_id] = {
            'text': caption,
            'username': user_name,
            'media_type': 'photo',
            'media_id': message.photo[-1].file_id  
        }
        await notify_admin(user_id, caption, 'photo', media_id=message.photo[-1].file_id)
        logger.info(f"User {user_id} submitted a photo news.")
    elif message.video:
        caption = message.caption if message.caption else ""
        news_submissions[user_id] = {
            'text': caption,
            'username': user_name,
            'media_type': 'video',
            'media_id': message.video.file_id  
        }
        await notify_admin(user_id, caption, 'video', media_id=message.video.file_id)
        logger.info(f"User {user_id} submitted a video news.")
    else:
        news_submissions[user_id] = {
            'text': message.text,
            'username': user_name,
            'media_type': None,
            'media_id': None
        }
        await notify_admin(user_id, message.text, 'text')
        logger.info(f"User {user_id} submitted a text news.")

    await message.answer("‚å®Ô∏è –í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:", reply_markup=user_kb())

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        await callback.answer("–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        submitted_user_id = int(callback.data.split('_')[1])
    except IndexError:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    submission = news_submissions.get(submitted_user_id)
    if callback.data.startswith("publish"):
        await callback.answer("–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        if submission:
            if submission['media_type'] == 'photo':
                await bot.send_photo(GROUP_CHAT_ID, photo=submission['media_id'], caption=submission['text'])
            elif submission['media_type'] == 'video':
                await bot.send_video(GROUP_CHAT_ID, video=submission['media_id'], caption=submission['text'])
            else:
                await bot.send_message(GROUP_CHAT_ID, submission['text'])
            news_submissions.pop(submitted_user_id, None) 
            await bot.send_message(submitted_user_id, "üì∞ –í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
            await bot.send_message(ADMIN_ID, "–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
            await callback.message.edit_reply_markup(reply_markup=None)
            logger.info(f"Admin {user_id} published news from user {submitted_user_id}.")
    elif callback.data.startswith("reject"):
        await callback.answer("–ù–æ–≤–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
        if submission:
            await bot.send_message(submitted_user_id, "‚ùå –í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            news_submissions.pop(submitted_user_id, None)  
        await bot.send_message(ADMIN_ID, "–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await callback.message.edit_reply_markup(reply_markup=None)
        logger.info(f"Admin {user_id} rejected news from user {submitted_user_id}.")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
